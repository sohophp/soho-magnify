"use strict";

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

!function (d, c) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = c(jQuery) : "function" == typeof define && define.amd ? define(["jquery"], c) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.SohoMagnify = c(jQuery) : d.SohoMagnify = c(jQuery);
}(void 0, function (a) {
  var b = function b(d, c) {
    this.element = d;
    this.$element = a(d);
    this.options = this.getOptions(c);

    if (!this.$element.parent().hasClass("soho-magnify")) {
      this.$element.wrap('<div class="soho-magnify" />');
      this.$element.parent(".soho-magnify").append('<div class="soho-magnify-large" />');
    }

    this.$magnify = this.$element.parent(".soho-magnify");
    this.$magnify_large = this.$element.siblings(".soho-magnify-large");
    var e = this.$element.attr("src");

    if (this.$element.data("large")) {
      e = this.$element.data("large");
    }

    this.$magnify.css({
      width: this.$element.width(),
      height: this.$element.height(),
      cursor: this.options.cursor
    });

    if (this.options.glass === 1) {
      this.$magnify_large.addClass("soho-magnify-large-glass");
    } else {
      this.$magnify.css({
        overflow: "hidden"
      });
    }

    this.$element.siblings(".soho-magnify-large").css("background", "url('" + e + "') no-repeat");
    this.$element.parent(".soho-magnify").on(this.event + "." + this.namespace, a.proxy(this.check, this)).on(this.eventOut + "." + this.namespace, a.proxy(this.check, this)).on("touchmove." + this.namespace, a.proxy(this.check, this)).on("touchend." + this.namespace, a.proxy(this.check, this));
  };

  b.prototype = {
    element: null,
    $element: null,
    event: "mousemove",
    eventOut: "mouseleave",
    namespace: "soho-magnify",
    nativeWidth: 0,
    nativeHeight: 0,
    getOptions: function getOptions(c) {
      c = a.extend({}, {
        delay: 0,
        zoom: 1,
        glass: 1,
        cursor: "none"
      }, c, this.$element.data());

      if (c.delay && typeof c.delay === "number") {
        c.delay = {
          show: c.delay,
          hide: c.delay
        };
      }

      return c;
    },
    check: function check(h) {
      var d = this,
          c = a(h.currentTarget),
          l = c.children("img"),
          g = c.children(".soho-magnify-large");

      if (!this.nativeWidth && !this.nativeHeight) {
        var f = new Image();
        f.src = l.data("large") ? l.data("large") : l.attr("src");
        a(f).on("load", function (m) {
          d.nativeWidth = f.width * d.options.zoom;
          d.nativeHeight = f.height * d.options.zoom;

          if (d.options.zoom === 1) {
            if (d.nativeWidth <= c.width()) {
              d.nativeWidth *= 1.5;
              d.nativeHeight *= 1.5;
            }
          }
        });
      } else {
        var i = c.offset(),
            k = h.pageX - i.left,
            j = h.pageY - i.top;

        if (k < c.width() && j < c.height() && k > 0 && j > 0) {
          g.fadeIn(100);
        } else {
          g.fadeOut(100);
        }

        if (g.is(":visible")) {
          if (this.options.glass === 1) {
            var rx = Math.round(k / c.width() * this.nativeWidth - g.width() / 2) * -1,
                ry = Math.round(j / c.height() * this.nativeHeight - g.height() / 2) * -1,
                bgp = rx + "px " + ry + "px",
                px = k - g.width() / 2,
                py = j - g.height() / 2,
                bs = this.nativeWidth + "px " + this.nativeHeight + "px";
            g.css({
              left: px,
              top: py,
              backgroundPosition: bgp,
              backgroundSize: bs
            });
          } else {
            g.css({
              width: this.nativeWidth,
              height: this.nativeHeight
            });

            var maxleft = 0,
                maxtop = 0,
                minleft = (g.width() - c.width()) * -1,
                mintop = (g.height() - c.height()) * -1,
                left = Math.round(k / c.width() * this.nativeWidth - c.width() / 2) * -1,
                top = Math.round(j / c.height() * this.nativeHeight - c.height() / 2) * -1,
                _bs = this.nativeWidth + "px " + this.nativeHeight + "px";

            if (left > maxleft) {
              left = maxleft;
            }

            if (top > maxtop) {
              top = maxtop;
            }

            if (left < minleft) {
              left = minleft;
            }

            if (top < mintop) {
              top = mintop;
            }

            g.css({
              left: left,
              top: top,
              backgroundSize: _bs
            });
          }
        }
      }
    },
    destroy: function destroy() {
      this.$element.parent(".soho-magnify").off(this.event + "." + this.namespace, a.proxy(this.check, this)).off(this.eventOut + "." + this.namespace, a.proxy(this.check, this)).off("touchmove." + this.namespace, a.proxy(this.check, this)).off("touchend." + this.namespace, a.proxy(this.check, this));
      this.$element.siblings(".soho-magnify-large").remove();
      this.$element.unwrap();
      this.$element.removeData("soho-magnify");
    }
  };

  a.fn.SohoMagnify = function (c) {
    return this.each(function () {
      var $this = a(this),
          data = $this.data("soho-magnify"),
          options = _typeof(c) === "object" && c;

      if (!data) {
        $this.data("soho-magnify", data = new b(this, options));
      }

      if (typeof c === "string") {
        data[c]();
      }
    });
  };

  a.fn.SohoMagnify.Constructor = b;
  a(window).on("load", function () {
    a("[data-toggle='soho-magnify']").each(function () {
      a(this).SohoMagnify();
    });
  });
  return b;
});
//# sourceMappingURL=soho-magnify.min.js.map